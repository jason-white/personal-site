/* Modern reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

/* Box sizing rules */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */

html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */

body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */

ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core body defaults */

body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */

h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */

h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */

a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */

img,
picture {
  max-width: 100%;
  display: block;
}

/* Undo margins on figure elements */

figure {
  margin: 0;
}

/* Inherit fonts for inputs and buttons */

input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */

textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */

:target {
  scroll-margin-block: 5ex;
}

/* @font-face here */

@font-face {
  font-family: "InterV";
  src: url("/fonts/InterVariable.woff2") format("woff2");
  font-weight: 100 900;
  font-style: normal;
}

@font-face {
  font-family: "InterV";
  src: url("/fonts/InterVariable-Italic.woff2") format("woff2");
  font-weight: 100 900;
  font-style: italic;
}

:root {
  --color-dark: #090807;
  --color-light: #FCF6F3;
  --color-primary: #FF5810;
  --color-primary-dark: #7C0E01;
  --color-primary-dark-red: #111;
  --color-secondary: #2F4446;
  --color-tertiary: red;
  --color-dark-rgb: 9, 8, 7;
  --space-zero: clamp(0rem, -0.01rem + 0.06vw, 0.0625rem);
  --space-3xs: clamp(0.25rem, 0.23rem + 0.12vw, 0.375rem);
  --space-2xs: clamp(0.5rem, 0.45rem + 0.23vw, 0.75rem);
  --space-xs: clamp(0.75rem, 0.68rem + 0.35vw, 1.125rem);
  --space-s: clamp(1rem, 0.91rem + 0.46vw, 1.5rem);
  --space-m: clamp(1.5rem, 1.36rem + 0.69vw, 2.25rem);
  --space-l: clamp(2rem, 1.81rem + 0.93vw, 3rem);
  --space-xl: clamp(3rem, 2.72rem + 1.39vw, 4.5rem);
  --space-2xl: clamp(4rem, 3.63rem + 1.85vw, 6rem);
  --space-3xl: clamp(6rem, 5.44rem + 2.78vw, 9rem);
  --space-4xl: clamp(8rem, 7.26rem + 3.70vw, 12rem);
  --space-3xs-2xs: clamp(0.25rem, 0.16rem + 0.46vw, 0.75rem);
  --space-2xs-xs: clamp(0.5rem, 0.38rem + 0.58vw, 1.125rem);
  --space-xs-s: clamp(0.75rem, 0.61rem + 0.69vw, 1.5rem);
  --space-s-m: clamp(1rem, 0.77rem + 1.16vw, 2.25rem);
  --space-m-l: clamp(1.5rem, 1.22rem + 1.39vw, 3rem);
  --space-l-xl: clamp(2rem, 1.54rem + 2.31vw, 4.5rem);
  --space-xl-2xl: clamp(3rem, 2.44rem + 2.78vw, 6rem);
  --space-2xl-3xl: clamp(4rem, 3.07rem + 4.63vw, 9rem);
  --space-3xl-4xl: clamp(6rem, 4.89rem + 5.56vw, 12rem);
  --space-s-l: clamp(1rem, 0.63rem + 1.85vw, 3rem);
  --space-s-xl: clamp(1rem, 0.35rem + 3.24vw, 4.5rem);
  --space-m-4xl: clamp(2.25rem, 0.44rem + 9.03vw, 12rem);
  --size-step-00: clamp(0.75rem, 0.68rem + 0.35vw, 1.125rem);
  --size-step-0: clamp(1rem, 0.91rem + 0.46vw, 1.5rem);
  --size-step-1: clamp(1.333125rem, 1.21rem + 0.62vw, 1.999375rem);
  --size-step-2: clamp(1.776875rem, 1.61rem + 0.82vw, 2.665625rem);
  --size-step-3: clamp(2.36875rem, 2.15rem + 1.10vw, 3.553125rem);
  --size-step-4: clamp(3.1575rem, 2.87rem + 1.46vw, 4.73625rem);
  --size-step-5: clamp(4.20875rem, 3.82rem + 1.95vw, 6.313125rem);
  --size-step-6: clamp(5.61rem, 5.09rem + 2.60vw, 8.415625rem);
  --leading-flat: 1;
  --leading-fine: 1.15;
  --leading-loose: 1.7;
  --font-base: InterV,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;
  --font-regular: 400;
  --font-medium: 500;
  --font-bold: 700;
  --gutter: var(--space-s-l);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --leading-standard: 1.5;
  --measure: 60ch;
  --letters-tight: -0.25rem;
  --wrapper-max-width: 2048px;
}

/* 
  Global styles 

  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/

body {
  background-color: #f4f4f4;
  background-image: url("/noise3.png");
  background-size: 300px 300px;
  background-repeat: repeat;

  color: var(--color-light);
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
  margin-block: 0;
  margin-inline: -4px;
}

.tortilla {
  position: relative;
  max-inline-size: var(--wrapper-max-width);
  margin-inline: auto;
  background-color: var(--color-dark);
  /* box-shadow: */
  /*   rgb(85, 91, 255) 0px 0px 0px 3px, */
  /*   rgb(31, 193, 27) 0px 0px 0px 6px, */
  /*   rgb(255, 217, 19) 0px 0px 0px 9px, */
  /*   rgb(255, 156, 85) 0px 0px 0px 12px, */
  /*   rgb(255, 85, 85) 0px 0px 0px 15px; */
  box-shadow:
    rgba(0, 0, 0, 0.07) 0px 1px 1px,
    rgba(0, 0, 0, 0.07) 0px 2px 2px,
    rgba(0, 0, 0, 0.07) 0px 4px 4px,
    rgba(0, 0, 0, 0.07) 0px 8px 8px,
    rgba(0, 0, 0, 0.07) 0px 16px 16px;
  /* overflow: clip; */
}

.tortilla::before,
.tortilla::after {
  position: absolute;
  content: "";
  top: 0;
  right: 0;
  bottom: 0;
  background-color: var(--color-light);
  filter: url(#roughEdges);
  z-index: 1;
  width: 1px;
}

.tortilla::after {
  left: 0;
}

p,
li,
blockquote {
  max-width: var(--measure);
}

a {
  text-decoration-color: var(--color-primary);
}

/*
COPY COMPOSITION
Keep any area with lots of copy
to a max width of --measure (default 60ch)
*/

.copy {
  max-inline-size: var(--measure, 60ch);
  text-wrap: pretty;
  hyphens: auto;
  hyphenate-limit-chars: 10;
}

figcaption {
  display: flex;
  font-size: var(--size-step-00);
}

figcaption > * {
  flex-basis: 50%;
}

figure img {
  width: 100%;
  height: auto;
  display: block;
}

.footer {
  --space: var(--space-2xs);
  --cluster-vertical-alignment: flex-start;
  position: relative;
  color: var(--color-light);
  font-size: var(--size-step-00);
  overflow: clip;
  z-index: 10;
}

.footer .wrapper {
  padding-block: var(--gutter);
  padding-block-end: var(--space-4xl);
}

.footer a {
  text-decoration: none;
}

.footer nav {
  --gutter: var(--space-xl);
  /* border-inline-start: 2px solid var(--color-light); */
  /* padding-inline-start: var(--space-s-m); */
}

/* .footer::before { */

/*   --shape-width: 80rem; */

/*   --shape-height: 70rem; */

/*   --shape-color: red; */

/**/

/*   content: ""; */

/*   position: absolute; */

/*   bottom: -70rem; */

/*   left: 25%; */

/*   width: var(--shape-width); */

/*   height: var(--shape-height); */

/*   border-radius: 50%; */

/*   background-color: var(--shape-color); */

/*   filter: blur(75px); */

/*   animation-name: rotate; */

/*   animation-duration: 12s; */

/*   animation-timing-function: linear; */

/*   animation-iteration-count: infinite; */

/*   /* animation-direction: alternate; */

/* } */

/* .footer::after { */

/*   --shape-width: 50rem; */

/*   --shape-height: 60rem; */

/*   --shape-color: red; */

/**/

/*   content: ""; */

/*   position: absolute; */

/*   bottom: -50rem; */

/*   left: 10%; */

/*   width: var(--shape-width); */

/*   height: var(--shape-height); */

/*   border-radius: 50%; */

/*   background-color: var(--shape-color); */

/*   filter: blur(75px); */

/*   animation-name: rotate; */

/*   animation-duration: 10s; */

/*   animation-timing-function: linear; */

/*   animation-iteration-count: infinite; */

/*   /* animation-direction: alternate; */

/* } */

footer svg {
  fill: var(--color-light);
}

/* @keyframes rotate { */

/*   0% { */

/*     transform: rotate(0deg); */

/*   } */

/*   100% { */

/*     transform: rotate(359deg); */

/*   } */

/* } */

/**/

/* @keyframes anime2 { */

/*   0% { */

/*     transform: translate(30%, 4%); */

/*   } */

/**/

/*   50% { */

/*     transform: translate(20%, 50%); */

/*   } */

/*   100% { */

/*     transform: translate(10%, 70%); */

/*   } */

/* } */

.header {
  font-size: var(--size-step-0);
}

.header .wrapper {
  padding-block: var(--gutter);
}

.header a {
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 600;
  color: var(--color-light);
}

.header h1 {
  display: flex;
  align-items: stretch;
  margin-block-start: 0;
  height: 2.5rem;
}

.logo {
  width: 2.5rem;
  height: 2.5rem;
  fill: var(--color-primary);
}

.hero mark {
  background: linear-gradient(
    0deg,
    transparent 19%,
    rgba(var(--color-dark-rgb), 0.75) 19%,
    rgba(var(--color-dark-rgb), 0.75) 65%,
    transparent 65%
  );
  color: var(--color-light);
}

.hero__inner {
  background-color: var(--color-primary);
  background-image: url("/noise3.png");
  background-size: 200px 200px;
  background-repeat: repeat;
  padding-block: var(--gutter);
  padding-inline-start: var(--gutter);
  border-top-left-radius: var(--space-s);
  border-bottom-left-radius: var(--space-s);
}

.hero__content {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-areas: "hero";
}

.hero__content .repel {
  grid-area: hero;
  position: relative;
  max-width: 70ch;
  z-index: 10;
  margin-inline-end: var(--gutter);
}

.hero__heading {
  font-size: var(--size-step-5);
  text-wrap: pretty;
  margin-block: 0;
  font-weight: 700;
  line-height: 0.9;
}

.hero__lede {
  font-size: var(--size-step-1);
  line-height: 1.2;
  font-weight: 500;
}

.hero__img {
  grid-area: hero;
  max-width: 25rem;
  justify-self: end;
}

.hero__img img {
  inline-size: 100%;
  block-size: 100%;
  mix-blend-mode: multiply;
  object-fit: cover;
  object-position: top center;
  border-top-left-radius: var(--space-s);
  border-bottom-left-radius: var(--space-s);
  filter: contrast(150%);
}

.home__posts {
  --space: var(--gutter);
  margin-block-start: var(--gutter);
}

.home__posts .sidebar {
  --sidebar-target-width: 40rem;
  --sidebar-content-min-width: 55%;
}

.home__journal {
}

.home__posts aside {
  padding-inline: var(--gutter);
}

.internal-pages {
  font-size: var(--size-step-00);
}

.post-list li {
  --space: var(--gutter);
  max-width: 100%;
}

.post-list article {
  --space: var(--space-s);
  font-size: var(--size-step-0);
  padding-block-end: var(--gutter);
  border-block-end: 1px solid #333;
}

.post-list .sidebar {
  --sidebar-target-width: 20ch;
  --sidebar-content-min-width: 60%;
}

/* .post-list__link { */

/*   font-size: var(--size-step-0); */

/*   padding-block-end: var(--gutter); */

/*   border-block-end: 1px solid #333; */

/* } */

.post-list h3 {
  font-size: var(--size-step-0);
  font-weight: 500;
}

.post-list time {
  font-size: var(--size-step-00);
  text-transform: uppercase;
}

.post-list__journal:hover .list__thumb {
  background: transparent;
  transition: 0.3s cubic-bezier(0, 0.55, 0.45, 1);
}

.post-list__journal:hover .list__thumb img {
  filter: none;
  mix-blend-mode: normal;
}

.list__thumb {
  aspect-ratio: 3/2;
  background-color: var(--color-primary);
  background-image: url("/noise3.png");
  border-radius: 3px;
  overflow: clip;
}

.list__thumb img {
  inline-size: 100%;
  block-size: 100%;
  object-fit: cover;
  object-position: top center;
  filter: saturate(0) contrast(125%);
  mix-blend-mode: multiply;
  transition: 0.3s cubic-bezier(0, 0.55, 0.45, 1);
}

.post__title {
  font-size: var(--size-step-6);
  letter-spacing: var(--letters-tight);
  line-height: var(--leading-flat);
  margin-block: 0;
  padding-block: var(--space-m);
  font-weight: 900;
}

.post__body {
  --sidebar-target-width: 60ch;
  --sidebar-content-min-width: 40%;
}

.post__content .sidebar {
  --sidebar-target-width: 30ch;
  --sidebar-content-min-width: 55%;
}

.post__feature {
  margin-inline-end: calc(var(--gutter) * -1);
}

.post__feature picture {
  border-start-start-radius: clamp(0rem, -2.4186rem + 9.9225vw, 8rem);
  border-end-start-radius: 0.5rem;
  background-color: var(--color-primary);
  overflow: clip;
}

.post__feature img {
  filter: saturate(0);
  mix-blend-mode: multiply;
}

.prose {
  --flow-space: var(--space-m);
}

.center {
  max-inline-size: var(--measure);
  margin-inline: auto;
}

/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-m));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}

/* 
FLOW COMPOSITION 
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ 
*/

.flow > * {
  margin: 0;
}

.flow > * + * {
  margin-block-start: var(--flow-space, 1em);
}

.flow[data-size="sm"] {
  --flow-space: clamp(0.5rem, 0.45rem + 0.23vw, 0.75rem);
}

/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

/* A split 50/50 layout */

.grid[data-layout="halves"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */

.grid[data-layout="thirds"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

.grid[data-layout="quarters"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: 25rem;
}

/*
REPEL
A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--repel-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.repel {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: var(--repel-vertical-alignment, center);
  gap: var(--gutter, var(--space-s-m));
}

.repel[data-nowrap] {
  flex-wrap: nowrap;
}

.repel[data-direction="column"] {
  align-items: var(--repel-horizontal-alignment, flex-start);
  flex-direction: column;
}

.repel[overlap] > :first-child {
  position: relative;
  top: 0;
  left: 0;
  bottom: 0;
}

/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
.sidebar[data-reverse='true']: reverses the order of the row items
*/

.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-m));
}

.sidebar[data-reverse="true"] {
  flex-direction: row-reverse;
}

.sidebar[data-wrap="false"] {
  flex-wrap: no-wrap;
}

.sidebar:not([data-direction="rtl"]) > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar:not([data-direction="rtl"]) > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

.sidebar[data-direction="rtl"] > :last-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar[data-direction="rtl"] > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-block: 0;
}

.stack > * + * {
  margin-block-start: var(--space, 1.5rem);
}

.stack--zero > * + * {
  --space: 0;
}

/*
SWITCHER
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
  align-items: var(--switcher-vertical-alignment, flex-start);
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc(
    (var(--switcher-target-container-width, 40rem) - 100%) * 999
  );
}

/* Max 2 items,
so anything greater than 2 is full width */

.switcher > :nth-child(n + 3) {
  flex-basis: 100%;
}

.switcher[data-direction="rtl"] {
  flex-direction: row-reverse;
}

/*
WRAPPER COMPOSITION 
A common wrapper/container
*/

.wrapper {
  margin-inline: auto;
  max-inline-size: var(--wrapper-max-width);
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

.wrapper[data-wrapper-type="inner"] {
  min-width: 100%;
  padding-block: var(--gutter-wrapper-inner-block, var(--gutter));
  padding-inline: var(--gutter-wrapper-inner-inline, var(--gutter));
}

.wrapper[data-bleed-right] {
  padding-right: 0;
}

.fade-in {
  animation: fadeInAnimation 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  animation-fill-mode: backwards;
}

@keyframes fadeInAnimation {
  0% {
    opacity: 0;
    transform: translateY(50px);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.slide-in {
  animation: slideInAnimation 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  animation-fill-mode: backwards;
}

@keyframes slideInAnimation {
  0% {
    opacity: 0;
    transform: translateX(200%);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.list-reset {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

/* 
REGION UTILITY
Consistent block padding for page sections
*/

.region {
  padding-block: var(--region-space, var(--space-xl-2xl));
}

/* 
STICKY UTILITY
Makes the direct child a sticky element
`--offset` is the spacing between the sticky
and the top of the viewport. `--gutter` is
the default.
*/

.sticky {
  --offset: var(--gutter);
}

.sticky > * {
  position: sticky;
  top: var(--offset, --gutter);
}

/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/

.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

/* Utility for removing line-height
*  Mostly just helpful for removing extra
*  space when wrapping my logo SVG in an
*  anchor tag */

.zero-height {
  display: block;
  line-height: 0;
}
