/* Modern reset: https://piccalil.li/blog/a-more-modern-css-reset/ */

/* Box sizing rules */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */

html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

/* Remove default margin in favour of better control in authored CSS */

body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin-block-end: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */

ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core body defaults */

body {
  min-height: 100vh;
  line-height: 1.5;
}

/* Set shorter line heights on headings and interactive elements */

h1,
h2,
h3,
h4,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */

h1,
h2,
h3,
h4 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */

a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */

img,
picture {
  max-width: 100%;
  display: block;
}

/* Undo margins on figure elements */

figure {
  margin: 0;
}

/* Inherit fonts for inputs and buttons */

input,
button,
textarea,
select {
  font: inherit;
}

/* Make sure textareas without a rows attribute are not tiny */

textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */

:target {
  scroll-margin-block: 5ex;
}

/* @font-face here */

@font-face {
  font-family: "InterV";
  src: url("/fonts/InterVariable.woff2") format("woff2");
  font-weight: 100 900;
  font-style: normal;
}

@font-face {
  font-family: "InterV";
  src: url("/fonts/InterVariable-Italic.woff2") format("woff2");
  font-weight: 100 900;
  font-style: italic;
}

:root {
  --color-dark: #111;
  --color-light: #fff;
  --color-primary: #A40F00;
  --color-primary-dark: #7C0E01;
  --color-primary-dark-red: #111;
  --color-secondary: #2F4446;
  --space-zero: clamp(0rem, -0.01rem + 0.04vw, 0.0625rem);
  --space-3xs: clamp(0.25rem, 0.23rem + 0.09vw, 0.375rem);
  --space-2xs: clamp(0.5rem, 0.46rem + 0.18vw, 0.75rem);
  --space-xs: clamp(0.75rem, 0.70rem + 0.27vw, 1.125rem);
  --space-s: clamp(1rem, 0.93rem + 0.36vw, 1.5rem);
  --space-m: clamp(1.5rem, 1.39rem + 0.54vw, 2.25rem);
  --space-l: clamp(2rem, 1.86rem + 0.71vw, 3rem);
  --space-xl: clamp(3rem, 2.79rem + 1.07vw, 4.5rem);
  --space-2xl: clamp(4rem, 3.71rem + 1.43vw, 6rem);
  --space-3xl: clamp(6rem, 5.57rem + 2.14vw, 9rem);
  --space-4xl: clamp(8rem, 7.43rem + 2.86vw, 12rem);
  --space-3xs-2xs: clamp(0.25rem, 0.18rem + 0.36vw, 0.75rem);
  --space-2xs-xs: clamp(0.5rem, 0.41rem + 0.45vw, 1.125rem);
  --space-xs-s: clamp(0.75rem, 0.64rem + 0.54vw, 1.5rem);
  --space-s-m: clamp(1rem, 0.82rem + 0.89vw, 2.25rem);
  --space-m-l: clamp(1.5rem, 1.29rem + 1.07vw, 3rem);
  --space-l-xl: clamp(2rem, 1.64rem + 1.79vw, 4.5rem);
  --space-xl-2xl: clamp(3rem, 2.57rem + 2.14vw, 6rem);
  --space-2xl-3xl: clamp(4rem, 3.29rem + 3.57vw, 9rem);
  --space-3xl-4xl: clamp(6rem, 5.14rem + 4.29vw, 12rem);
  --space-s-l: clamp(1rem, 0.71rem + 1.43vw, 3rem);
  --space-s-xl: clamp(1rem, 0.50rem + 2.50vw, 4.5rem);
  --space-m-4xl: clamp(2.25rem, 0.86rem + 6.96vw, 12rem);
  --size-step-00: clamp(0.833125rem, 0.80rem + 0.16vw, 1.060625rem);
  --size-step-0: clamp(1rem, 0.93rem + 0.36vw, 1.5rem);
  --size-step-1: clamp(1.2rem, 1.07rem + 0.66vw, 2.12125rem);
  --size-step-2: clamp(1.44rem, 1.22rem + 1.11vw, 2.999375rem);
  --size-step-3: clamp(1.728125rem, 1.37rem + 1.79vw, 4.240625rem);
  --size-step-4: clamp(2.07375rem, 1.51rem + 2.80vw, 5.99625rem);
  --size-step-5: clamp(2.488125rem, 1.63rem + 4.28vw, 8.47875rem);
  --size-step-6: clamp(2.98625rem, 1.70rem + 6.43vw, 11.989375rem);
  --leading-flat: 1;
  --leading-fine: 1.15;
  --leading-loose: 1.7;
  --font-base: InterV,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;
  --font-regular: 400;
  --font-medium: 500;
  --font-bold: 700;
  --gutter: var(--space-s-l);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --leading-standard: 1.5;
  --measure: 60ch;
}

/* 
  Global styles 

  Low-specificity, global styles that apply to the whole 
  project: https://cube.fyi/css.html
*/

body {
  background: var(--color-light);
  color: var(--color-dark);
  font-size: var(--size-step-0);
  font-family: var(--font-base);
  line-height: var(--leading-standard);
  margin: 0;
}

/*
COPY COMPOSITION
Keep any area with lots of copy
to a max width of --measure (default 60ch)
*/

.copy {
  max-inline-size: var(--measure, 60ch);
  text-wrap: pretty;
  hyphens: auto;
  hyphenate-limit-chars: 10;
}

figcaption {
  display: flex;
  font-size: var(--size-step-00);
}

figcaption > * {
  flex-basis: 50%;
}

figure img {
  width: 100%;
  height: auto;
  display: block;
}

.footer {
  --space: var(--space-2xs);
  --cluster-vertical-alignment: flex-start;
  position: relative;
  margin-block-start: var(--space-m-4xl);
  background-color: var(--color-primary);
  color: var(--color-light);
  padding-block: var(--gutter);
  padding-block-end: var(--space-4xl);
  font-size: var(--size-step-00);
  overflow: clip;
  z-index: 10;
}

.footer a {
  text-decoration: none;
}

.footer nav {
  --gutter: var(--space-xl);
  /* border-inline-start: 2px solid var(--color-light); */
  /* padding-inline-start: var(--space-s-m); */
}

/* .footer::before { */

/*   --shape-width: 80rem; */

/*   --shape-height: 70rem; */

/*   --shape-color: red; */

/**/

/*   content: ""; */

/*   position: absolute; */

/*   bottom: -70rem; */

/*   left: 25%; */

/*   width: var(--shape-width); */

/*   height: var(--shape-height); */

/*   border-radius: 50%; */

/*   background-color: var(--shape-color); */

/*   filter: blur(75px); */

/*   animation-name: rotate; */

/*   animation-duration: 12s; */

/*   animation-timing-function: linear; */

/*   animation-iteration-count: infinite; */

/*   /* animation-direction: alternate; */

/* } */

/* .footer::after { */

/*   --shape-width: 50rem; */

/*   --shape-height: 60rem; */

/*   --shape-color: red; */

/**/

/*   content: ""; */

/*   position: absolute; */

/*   bottom: -50rem; */

/*   left: 10%; */

/*   width: var(--shape-width); */

/*   height: var(--shape-height); */

/*   border-radius: 50%; */

/*   background-color: var(--shape-color); */

/*   filter: blur(75px); */

/*   animation-name: rotate; */

/*   animation-duration: 10s; */

/*   animation-timing-function: linear; */

/*   animation-iteration-count: infinite; */

/*   /* animation-direction: alternate; */

/* } */

footer svg {
  fill: var(--color-light);
}

/* @keyframes rotate { */

/*   0% { */

/*     transform: rotate(0deg); */

/*   } */

/*   100% { */

/*     transform: rotate(359deg); */

/*   } */

/* } */

/**/

/* @keyframes anime2 { */

/*   0% { */

/*     transform: translate(30%, 4%); */

/*   } */

/**/

/*   50% { */

/*     transform: translate(20%, 50%); */

/*   } */

/*   100% { */

/*     transform: translate(10%, 70%); */

/*   } */

/* } */

.header {
  font-size: var(--size-step-0);
  padding-block: var(--gutter);
}

.header a {
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 600;
  color: var(--color-dark);
}

.logo {
  width: 2.5rem;
  height: 2.5rem;
}

.internal-pages {
  font-size: var(--size-step-00);
}

.post__content h1 {
  font-size: var(--size-step-6);
  margin-block-start: 0;
  border-block-start: 2px solid var(--color-dark);
  padding-block: var(--space-m-4xl);
  font-weight: 400;
}

.post__copy,
.post__content aside {
  border-block-start: 2px solid var(--color-dark);
  padding-block-start: var(--space-m);
}

.post__feature {
  margin-block-end: var(--space-m);
}

.post__feature img {
  mix-blend-mode: multiply;
  width: 100%;
}

.post--landscape {
  --sidebar-target-width: var(--measure);
  --sidebar-content-min-width: 60%;
}

.post--landscape h1 {
  font-size: var(--size-step-3);
  padding-block: var(--space-s-xl);
}

.post--landscape .post__content > div {
  grid-column: span 2;
}

.prose {
  --flow-space: var(--space-m);
}

.center {
  max-inline-size: var(--measure);
  margin-inline: auto;
}

/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-m));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}

/* 
FLOW COMPOSITION 
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/ 
*/

.flow > * {
  margin: 0;
}

.flow > * + * {
  margin-block-start: var(--flow-space, 1em);
}

.flow[data-size="sm"] {
  --flow-space: clamp(0.5rem, 0.45rem + 0.23vw, 0.75rem);
}

/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

/* A split 50/50 layout */

.grid[data-layout="halves"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */

.grid[data-layout="thirds"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

.grid[data-layout="quarters"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50%, 15rem);
}

/*
REPEL
A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--repel-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.repel {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: var(--repel-vertical-alignment, center);
  gap: var(--gutter, var(--space-s-m));
}

.repel[data-nowrap] {
  flex-wrap: nowrap;
}

.repel[data-direction="column"] {
  align-items: var(--repel-horizontal-alignment, flex-start);
  flex-direction: column;
}

/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/

.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-m));
}

.sidebar:not([data-direction="rtl"]) > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar:not([data-direction="rtl"]) > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

.sidebar[data-direction="rtl"] > :last-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}

.sidebar[data-direction="rtl"] > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}

.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-block: 0;
}

.stack > * + * {
  margin-block-start: var(--space, 1.5rem);
}

.stack--zero > * + * {
  --space: 0;
}

/*
SWITCHER
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
  align-items: var(--switcher-vertical-alignment, flex-start);
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc(
    (var(--switcher-target-container-width, 40rem) - 100%) * 999
  );
}

/* Max 2 items,
so anything greater than 2 is full width */

.switcher > :nth-child(n + 3) {
  flex-basis: 100%;
}

.switcher[data-direction="rtl"] {
  flex-direction: row-reverse;
}

/*
WRAPPER COMPOSITION 
A common wrapper/container
*/

.wrapper {
  margin-inline: auto;
  max-width: clamp(16rem, var(--wrapper-max-width, 100vw), 160rem);
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

.list-reset {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

/* 
REGION UTILITY
Consistent block padding for page sections
*/

.region {
  padding-block: var(--region-space, var(--space-xl-2xl));
}

/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/

.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

/* Utility for removing line-height
*  Mostly just helpful for removing extra
*  space when wrapping my logo SVG in an
*  anchor tag */

.zero-height {
  display: block;
  line-height: 0;
}
